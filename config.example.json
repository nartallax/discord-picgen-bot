{
	"clientID": "469771750285115392",
	"guildID": "581216905654960129",
	"channelID": ["601126787497590784"],
	"savedPropmtsChannelID": "846827490843951174",
	"starredPromptsChannelID": "846827490843951174",
	"promptCutoffLimitInDisplay": 50,
	"deleteFiledAfterUpload": false,
	"reactionWaitingTimeSeconds": 86400,
	"tempPicturesDirectory": "./tmp_pictures",
	"permissions": {
		"ðŸ¤”": ["595903743308857347", "595900578975055885"]
	},
	"repeatedTasks": [{
		"timeMask": ["^.*?00:00$"],
		"command": "dream",
		"options": {"params": "nya-nya! --silent"},
		"channelId": "846827490843951174",
		"userId": "469771750285115392"
	}],
	"commands": {
		"dream": {
			"type": "generation",
			"commandTemplate": "node picture_generator_example.js $INPUT_JSON",
			"prompt": {
				"position": "before_params",
				"maxWordCount": 77
			},
			"convertInputPicturesTo": "jpg",
			"text": {
				"description": "Generate a picture by parameters",
				"paramDescription": "Prompt and other parameters of generation"
			},
			"params": [{
				"key": ["--silent"],
				"jsonName": "silent",
				"role": "silent",
				"type": "bool",
				"humanName": "Silent",
				"description": "hides most of the text output related to task, only pictures remains. reacts also won't be active."
			}, {
				"key": ["--private"],
				"jsonName": "private",
				"role": "private",
				"type": "bool",
				"humanName": "Private",
				"description": "hides prompt and params from bot output"
			}, {
				"key": ["--height", "-H"],
				"keyHidden": ["-h"],
				"jsonName": "height",
				"type": "int",
				"humanName": "Height",
				"description": "height of the image",
				"default": 512
			}, {
				"key": ["--width", "-W"],
				"jsonName": "width",
				"type": "int",
				"humanName": "Width",
				"description": "width of the image",
				"default": 512
			}, {
				"key": ["--cfg_scale", "-C"],
				"jsonName": "scale",
				"type": "float",
				"humanName": "Scale",
				"description": "CFG scale factor",
				"default": 7
			}, {
				"key": ["--number", "-n"],
				"jsonName": "number",
				"type": "int",
				"default": 1,
				"humanName": "Number",
				"description": "number of images"
			}, {
				"key": ["--separate-images", "-i"],
				"jsonName": "separateImages",
				"type": "bool",
				"humanName": "Separate images",
				"description": "returns multiple images as separate files"
			}, {
				"key": ["--grid", "-g"],
				"jsonName": "grid",
				"type": "bool",
				"humanName": "Grid",
				"description": "composite multiple images into grid"
			}, {
				"key": ["--sampler", "-A"],
				"jsonName": "sampler",
				"type": "enum",
				"default": "k_lms",
				"humanName": "Sampler",
				"allowedValues": ["k_lms", "ddim", "plms", "k_euler", "k_euler_ancestral", "k_neun", "k_dpm_2", "k_dpm_2_ancestral"]
			}, {
				"key": ["--steps", "-s"],
				"jsonName": "steps",
				"type": "int",
				"default": 50,
				"humanName": "Steps",
				"description": "number of steps"
			}, {
				"key": ["--seed", "-S"],
				"jsonName": "seed",
				"type": "string",
				"default": "",
				"humanName": "Seed",
				"description": "random seed to use"
			}, {
				"key": ["--prior", "-p"],
				"jsonName": "prior",
				"type": "string",
				"default": "",
				"humanName": "Prior",
				"description": "vector_adjust_prior"
			}, {
				"key": ["--ascii", "-a"],
				"jsonName": "ascii",
				"type": "bool",
				"humanName": "ASCII",
				"description": "a trip back to 1970"
			}, {
				"key": ["--asciicols", "-ac"],
				"jsonName": "asciiCols",
				"type": "int",
				"default": 80,
				"humanName": "ASCII cols",
				"description": "if ascii, number of text columns"
			}]
		},
		"dreamhelp": {
			"type": "help",
			"for": "dream",
			"text": {
				"description": "Displays help about /dream command",
				"header": "Usage: /dream prompt [params]"
			}
		},
		"dreamrepeat": {
			"type": "repeat_generation",
			"anyOfLatest": ["dream"],
			"text": {
				"description": "Repeat last /dream command of this user",
				"noPreviousFound": "Hey $USER, I don't remember you posting any requests. Maybe I did restart since then?"
			}
		}
	},
	"text": {
		"lenny": ["( Í¡Â° ÍœÊ– Í¡Â°)", "à²¥â€¿à²¥", "ã€‚â—•â€¿â€¿â—•ã€‚"],
		"savedPrompt": "```\n$PROMPT\n$PARAMS_BY_KEYS_NICE\n```",
		"starredPrompt": "THIS is nice! I like that!",
		"pause": {
			"description": "This will pause the queue.",
			"reply": "Paused!"
		},
		"unpause": {
			"description": "This will unpause the queue.",
			"reply": "Unpaused!"
		},
		"errors": {
			"cannotResolveGuild": "Cannot get guild $GUILD_ID!",
			"cannotResolveMember": "Cannot get member $USER_ID!",
			"actionNotAllowed": "Hey $USER, you cannot do $ACTION!",
			"badConfigLaunchCommandTooComplex": "Bad configuration: weird generation command template. Some part of it parsed as $PART_JSON, and I don't know how to launch that.",
			"badConfigNoCommandParts": "Bad configuration: weird generation command template. Expected to have at least one command part.",
			"paramNotNumber": "Was expecting number as value of parameter $PARAM_KEY, got $PARAM_VALUE instead",
			"attachmentNotPicture": "One of the attachments is not picture; can't process.",
			"duplicateParamPassed": "One of parameters is passed twice, last time with key $PARAM_KEY",
			"unknownParam": "No param is defined for key $PARAM_KEY",
			"noValueAfterParam": "Expected a value after key $PARAM_KEY",
			"paramNotInteger": "Expected integer number value after key $PARAM_KEY, but this value has fractional part: $PARAM_VALUE",
			"paramNotInAllowedList": "Value $PARAM_VALUE is not one of allowed values of parameter $PARAM_KEY.",
			"requiredParamNotPassed": "No value is provided for parameter $PARAM_KEY, and it has no default. Cannot continue without this value.",
			"pictureTooLarge": "Cannot upload picture $PICTURES_GENERATED / $PICTURES_EXPECTED for task #$TASK_ID: it is too large ($IMAGE_SIZE)"
		},
		"generation": {
			"newTaskCreated": {
				"public": "Got new task #$TASK_ID: $PROMPT\n$PARAMS_BY_KEYS_NICE",
				"private": "Got new task #$TASK_ID"
			},
			"newTaskCreatedPaused": {
				"public": "Got new task #$TASK_ID: $PROMPT\n$PARAMS_BY_KEYS_NICE (it won't run just yet, because queue is paused)"
			},
			"outputPicture": {
				"public": "Picture $PICTURES_GENERATED / $PICTURES_EXPECTED in task #$TASK_ID, $TIME_PASSED"
			},
			"promptWordsDroppedOnTaskCreation": {
				"public": "Dropped $DROPPED_PROMPT_WORDS_COUNT words from prompt. Only allowed to have up to $PROMPT_WORDS_LIMIT words in prompt."
			},
			"generationCompleted": {
				"public": "$USER, generation #$TASK_ID completed in $TIME_PASSED, generated $PICTURES_GENERATED / $PICTURES_EXPECTED pictures",
				"private": "Generation #$TASK_ID completed in $TIME_PASSED, generated $PICTURES_GENERATED / $PICTURES_EXPECTED pictures"
			},
			"outputPictureNotFound": {
				"public": "Output file not found: $GENERATED_PICTURE_PATH"
			},
			"cannotReadOutputPicture": {
				"public": "Failed to read output file $GENERATED_PICTURE_PATH"
			},
			"noParams": "Hey $USER, where's parameters? I need them to generate anything, y'know."
		},
		"status": {
			"description": "Display generation queue and currently processed task",
			"runningTasksPrefix": "**Running**:\n",
			"runningTask":	{
				"public": "#**$TASK_ID**: $PROMPT_SHORT ($TIME_PASSED, $PICTURES_GENERATED / $PICTURES_EXPECTED)",
				"private": "#**$TASK_ID**: <prompt hidden> ($TIME_PASSED, $PICTURES_GENERATED / $PICTURES_EXPECTED)"
			},
			"queuedTasksPrefix": "**Queued**:\n",
			"queuedTask": {
				"public": "#**$TASK_ID**: $PROMPT_SHORT",
				"private": "#**$TASK_ID**: <prompt hidden>"
			},
			"noTasks": "Nothing going on!"
		},
		"drop": {
			"description": "Drop a specific task by its ID",
			"taskIdDescription": "ID of task to be dropped",
			"noTaskId": "Hey $USER, gimme a task ID! What task should I drop?",
			"killedRunningTask": {
				"public": "Task #$TASK_ID was the current running task. Stopped."
			},
			"dequeuedTask": {
				"public": "Removed task #$TASK_ID from the queue."
			},
			"taskNotFound": "Hey $USER, task #$TASK_ID is nowhere to be found! Whadda you want from me, weird human?"
		},
		"purge": {
			"description": "Stop current generation and clear the queue",
			"completed": "Purged! :fire:"
		},
		"clear": {
			"description": "Clear the queue without stopping current generation",
			"completed": "Cleared! :soap:"
		},
		"kill": {
			"description": "Interrupt currently running task",
			"success": {
				"public": "Killed task #$TASK_ID! :knife:"
			},
			"taskNotFound": "Hey $USER, no task is running, what do you want from me, weird human?"
		},
		"ping": {
			"description": "Ping!",
			"reply": "$USER, time between message sent and receive is $TIME_DIFF (roughly)"
		}
	}
}